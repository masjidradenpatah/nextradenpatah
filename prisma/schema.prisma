generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  gender        String?
  role          UserRole  @default(JAMAAH)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account?
  article       Article[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model resetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
 de
model resetPasswordRequest {
  id    String   @id @default(cuid())
  date  DateTime
  email String
}

model Program {
  id               String             @id
  title            String
  description      String
  content          String
  image            String
  type             ProgramType
  showMoreLink     Boolean            @default(false)
  customeUrl       String?
  programExecution ProgramExecution[]
}

model ProgramExecution {
  id           String        @id @default(cuid())
  title        String
  image        String?
  date         DateTime?
  showOrder    Int?
  status       ProgramStatus
  showMoreLink Boolean       @default(false)
  programId    String
  program      Program       @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model Article {
  id       String          @id @default(cuid())
  title    String
  slug     String          @unique
  category ArticleCategory @default(NOT_SET)
  content  String
  coverUrl String?
  views    Int             @default(0)
  status   ArticleStatus   @default(DRAFT)
  authorId String
  backupId String?
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  backup   Article?        @relation("BackupRelation", fields: [backupId], references: [id])
  original Article[]       @relation("BackupRelation")
}

enum UserRole {
  ADMIN
  DC
  PTQ
  UMAR
  IMC
  TAKMIR
  JAMAAH
}

enum ProgramType {
  DAILY
  ANNUALY
}

enum ProgramStatus {
  UPCOMING
  DONE
  CANCELED
}

enum ArticleStatus {
  DRAFT
  ARCHIVED
  PUBLISHED
}

enum ArticleCategory {
  NOT_SET
  PENDIDIKAN
  AKIDAH
  FIQIH
}
